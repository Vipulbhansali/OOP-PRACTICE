class Product:
    
    def __init__(self,id,name,category,price,discount=None):
        self.id = id
        self.name = name
        self.category = category
        try:
            self.price = price
        except ValueError as e:
            print(f"Error setting price: {e}")
            
        try:
            self.discount = discount
            
        except ValueError as e:
            print(f"Error setting Discount: {e}")
            
        Inventory.add_product_to_inventory(self)
        
    def get_product_info(self):
        print(f'This is a product from {self.category}. Price of this product is {self.price}.')
        
        
    @property
    def price(self):
        return self._price
    
    @price.setter
    def price(self, new_price):
        if not isinstance(new_price, (float,int)):
            raise ValueError("Price should be a numeric number.")
                          
        if new_price <= 0:
            raise ValueError('Price cannot be 0 or Negative')
        self._price = new_price
        
    @property
    def discount(self):
        return self._discount
    
    @discount.setter
    def discount(self,new_discount):
        if new_discount is not None and not isinstance(new_discount,int):
            raise ValueError('Discount should be integer whole number')
        self._discount = new_discount 
        
        
    def __str__(self):
        return f"{self.name} - {self.category} - Price: {self._price}"  #we can print product class.
    
    
    def __repr__(self):
        return f"Product({self.id}, {self.name}, {self.category}, {self._price}, {self.description})"
    
    
class Clothing(Product):
    
    def __init__(self,id,name,category,price,discount,type,gender,size,color,material):
        super().__init__(id,name,category,price,discount)
        self.gender = gender
        self.size = size
        self.color = color
        self.type = type
        self.material = material
        self.sizes = []
        self.colors=[]
        self.materials=[]
        self.add_attribute('size', self.size)
        self.add_attribute('color', self.color)
        self.add_attribute('material', self.material)
        Inventory.add_product_to_inventory(self)
        
        
    def get_info(self):
        return f"This is a clothing Product. This is for {self.gender}. This is a {self.type}. Size of this {self.type} is {self.size}. Color is {self.color}. Material is {self.material}.Price is {self.price}"
    
    
    def add_attribute(self,attribute_type,value):
        
        if attribute_type== 'size' and value not in self.sizes:
            self.sizes.append(value)
            
        elif attribute_type == 'color' and value not in self.colors:
            self.colors.append(value)
            
        elif attribute_type == 'material' and value not in self.materials:
            self.materials.append(value)
            
        else :
            print(f"{value} is already in {attribute_type} list")
            
    @classmethod        
    def get_available_sizes(cls):
        for id,value in enumerate(cls.sizes,1):
            print(id,value)
            
    @classmethod        
    def get_available_colors(cls):
        for id,value in enumerate(cls.colors,1):
            print(id,value)
            
    @classmethod        
    def get_available_material(cls):
        for id,value in enumerate(cls.materials,1):
            print(id,value)
            
            
class Electronic(Product):
    
    def __init__(self, id, name,category, price, discount, brand, model):
        super().__init__(id, name,category, price, discount)
        self.brand = brand
        self.model = model
        self.brands = []
        self.models = []
        self.add_attribute('brand',self.brand)
        self.add_attribute('model',self.model)
        Inventory.add_product_to_inventory(self)
        
    def get_info(self):
        return f"This is an electronic {self.category}. Brand: {self.brand}, Model: {self.model}. Price: {self.price}"
    
    
    def add_attribute(self,attribute_type,value):
        if attribute_type== 'brand' and value not in self.brands:
            self.brands.append(value)
            
        elif attribute_type == 'model' and value not in self.models:
            self.models.append(value)
            
        else:
            print(f"{value} is already in {attribute_type} list")
            
            
            
    @classmethod        
    def get_available_brands(cls):
        for id,value in enumerate(cls.brands,1):
            print(id,value)
            
            
    @classmethod        
    def get_available_models(cls):
        for id,value in enumerate(cls.models,1):
            print(id,value)
            

class Inventory:
    
    def __init__(self):
        self.product_list = {}
    
    @classmethod
    def add_product_to_inventory(cls,new_product):
        
        if isinstance(new_product,Product):
            product_id = new_product.id
            if product_id not in cls.product_list:
                cls.product_list[new_product.id]=new_product
                print(f"Product with id {new_product.id} added to inventory.")
                
            else:
                print(f"Product with id {product_id} already exists in inventory.")
            
        else:
            print("Invalid product type. Cannot be added to inventory.")
            
            
    def update_product_quantity(self,product_id,quantity):
        
        if quantity <= 0:
            print('Quantity cannot be less than or equal to zero')
            
        elif product_id in self.product_list:
            self.product_list[product_id].setdefault('quantity', 0)
            self.product_list[product_id]['quantity'] += quantity
            updated_quantity = self.product_list[product_id]['quantity']
            print(f"Quantity for product ID {product_id} updated to {updated_quantity}")
            
        else:
            print('Product ID not found in inventory')
            
            
            
    def check_product_availability(self,product_id):
        
        if product_id > 0:
            if product_id in self.product_list:
                print('Product is available. You can shop')
            else:
                print('Product is currently not present. Check out later.')
                
        else:
            print('Product id should be greater than 0')
            
            
    def remove_product_from_inventory(self, product_id):

        if product_id > 0:
            if product_id in self.product_list:
                del self.product_list[product_id]
                print(f"Product with ID {product_id} removed from inventory.")
            else:
                print('Product ID not found in inventory.')
                
        else:
            print('Product ID should be greater than 0')
            
            
    def get_product_details(self,product_id):
        
        if product_id > 0:
            if product_id in self.product_list:
                
                product = self.product_list[product_id]
                if isinstance(product, Product):
                    print("Product Details:")
                    print(f"ID: {product.id}")
                    print(f"Name: {product.name}")
                    print(f"Category: {product.category}")
                    print(f"Price: {product.price}")
                    if isinstance(product, Clothing):
                        print(f"Type: {product.type}")
                        print(f"Gender: {product.gender}")
                        print(f"Size: {product.size}")
                        print(f"Color: {product.color}")
                        print(f"Material: {product.material}")
                    elif isinstance(product, Electronic):
                        print(f"Brand: {product.brand}")
                        print(f"Model: {product.model}")
                    else:
                        print("Product type details not available.")
                else:
                    print("Invalid product.")
            else:
                print('Product ID not found in inventory.')
        
        else:
            print('Product ID cannot be negative. Enter a positive ID')
        
    def list_products_by_category(self,category):
        
        filtered_products = filter(lambda product : str(product.category).lower() == category.lower(),self.product_list.values())
        for product in filtered_products:
            print(product)
            
            
    def list_product_by_gender(self,gender):
        
        filtered_products = filter(lambda product : hasattr(product, 'gender') and str(product.gender).lower() == gender.lower(),self.product_list.values())
        for product in filtered_products:
            print(product)
            
    def get_product_by_brand(self,brand):
        
        filtered_products = filter(lambda product : hasattr(product,'brand') and str(product.brand).lower() == brand.lower(),self.product_list.values())
        for product in filtered_products:
            print(product)


    def sort_product_by_price(self,category):
        
        filtered_products = filter(lambda product: hasattr(product, 'category') and str(product.category).lower() == category.lower(), self.product_list.values())
        sorted_products = sorted(filtered_products, key=lambda product: getattr(product, 'price', 0))
        
        print(f"Products in category '{category}' sorted by price Low to High:")
        for product in sorted_products:
            print(product)
