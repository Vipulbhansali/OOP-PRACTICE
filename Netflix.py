{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5cd69072",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import time\n",
    "\n",
    "class content:\n",
    "    \n",
    "    def __init__ (self, title, genre, year, duration,category):\n",
    "        \n",
    "        self.title = title\n",
    "        self.genre = genre\n",
    "        self.year = int(year)\n",
    "        self.duration = duration\n",
    "        self.category = category\n",
    "        \n",
    "    def get_info(self):\n",
    "        \n",
    "        return f\"{self.title} is a {self.category} from {self.genre} Genre. It was released in {self.year}. It has a total runtime of {self.duration}.\"\n",
    "    \n",
    "    \n",
    "class Movie(content):\n",
    "    \n",
    "    def __init__(self, title, genre, year, duration,category,director):\n",
    "        super().__init__(title, genre, year, duration,category)\n",
    "        self.director = director\n",
    "        \n",
    "    def get_info(self):\n",
    "        \n",
    "        return f\"{super().get_info()} Directed by {self.director}\"\n",
    "    \n",
    "    \n",
    "class Tvshow(content):\n",
    "    \n",
    "    def __init__(self,title, genre, year, duration,category,seasons):\n",
    "        super().__init__(title, genre, year, duration,category)\n",
    "        self.seasons = seasons\n",
    "    \n",
    "    def get_info(self):\n",
    "        \n",
    "        return f\"{super().getinfo()} This TV Series has {self.seasons}\" # Method over-riding\n",
    "    \n",
    "    \n",
    "class User:\n",
    "    SUBSCRIPTION_LEVELS = ['Platinum', 'Gold', 'Silver']\n",
    "    \n",
    "    def __init__(self,username,email,subscription_type,platform):\n",
    "        self._username = username\n",
    "        self.email = email\n",
    "        self.subscription_type = subscription_type\n",
    "        self.platform = platform\n",
    "        self.watched_movies = []\n",
    "        self.watched_tv_shows=[]\n",
    "        \n",
    "        \n",
    "        \n",
    "    def subscribe(self, subscription_type):\n",
    "        \n",
    "        \n",
    "        for id,sub in enumerate(SUBSCRIPTION_LEVELS,1):\n",
    "            print(f'{id} : {sub}')\n",
    "            \n",
    "        selection = int(input('Which level of Subcription you want to subscribe to ? Press that number '))\n",
    "        if selection == 1:\n",
    "            self.subscription_type = 'Platinum'\n",
    "            print('You have subscribed to Platinum level.')\n",
    "        elif selection == 2:\n",
    "            self.subscription_type = 'Gold'\n",
    "            print('You have subscribed to Gold level.')\n",
    "        elif selection == 3:\n",
    "            self.subscription_type = 'Silver'\n",
    "            print('You have subscribed to Silver level.')\n",
    "        else :\n",
    "            print('Invalid input')\n",
    "            self.subscribe()\n",
    "            \n",
    "    \n",
    "    def change_subscription(self):\n",
    "        \n",
    "        current_subscription = self.subscription_type\n",
    "        \n",
    "        if current_subscription == 'Gold':\n",
    "            print('Your current subscription is Gold.')\n",
    "            print('You have the following options:')\n",
    "            print('1. Stay with Gold')\n",
    "            print('2. Switch to Platinum')\n",
    "            print('3. Switch to Silver')\n",
    "            \n",
    "            ans = int(input('Enter the number you want to go with ?'))\n",
    "            if ans == 2:\n",
    "                print('You have opted for Platinum. Congratulations!')\n",
    "                self.subscription_type = 'Platinum'\n",
    "            elif ans == 3:\n",
    "                print('You have opted to downgrade it to Silver.')\n",
    "                self.subscription_type = 'Silver'\n",
    "            else:\n",
    "                print('You have opted not to change your subscription.')\n",
    "                \n",
    "        elif current_subscription == 'Silver':\n",
    "            print('Your current subscription is Silver.')\n",
    "            print('You have the following options:')\n",
    "            print('1. Stay with Silver')\n",
    "            print('2. Upgrade to Gold')\n",
    "            print('3. Upgrade to Platinum')\n",
    "        \n",
    "            ans = int(input('Enter the number you want to go with ?'))\n",
    "            if ans == 2:\n",
    "                print('You have opted to upgrade to Gold.')\n",
    "                self.subscription_type = 'Gold'\n",
    "            elif ans == 3:\n",
    "                print('You have opted to upgrade to Platinum. Congratulations!')\n",
    "                self.subscription_type = 'Platinum'\n",
    "            else:\n",
    "                print('You have opted not to change your subscription.')\n",
    "                \n",
    "        elif current_subscription == 'Platinum':\n",
    "            print('Your current subscription is Platinum.')\n",
    "            print('You have the following options:')\n",
    "            print('1. Stay with Platinum')\n",
    "            print('2. Downgrade to Gold')\n",
    "            print('3. Downgrade to Silver')\n",
    "        \n",
    "            ans = int(input('Enter the number you want to go with ?'))\n",
    "            if ans == 2:\n",
    "                print('You have opted to downgrade to Gold.')\n",
    "                self.subscription_type = 'Gold'\n",
    "            elif ans == 3:\n",
    "                print('You have opted to downgrade to Silver.')\n",
    "                self.subscription_type = 'Silver'\n",
    "            else:\n",
    "                print('You have opted not to change your subscription.')\n",
    "            \n",
    "        else:\n",
    "            print('Invalid subscription type.')\n",
    "            \n",
    "                \n",
    "    @property\n",
    "    def username(self):\n",
    "        return self._username\n",
    "        \n",
    "    @username.setter\n",
    "    def username(self,new_username):\n",
    "        self._username = new_username\n",
    "    \n",
    "    \n",
    "    def update_profile(self) :\n",
    "        attempts = 3\n",
    "        while attempts>0:\n",
    "            \n",
    "            new_username = input('Enter new username:(type \"exit\" to cancel) ')\n",
    "            \n",
    "            if new_username.lower() == 'exit':\n",
    "                print('Profile update cancelled.')\n",
    "                break\n",
    "            \n",
    "            \n",
    "            elif new_username not in self.platform.users.keys() and new_username != self._username :\n",
    "                self._username = new_username\n",
    "                print('Username has been successfully changed !')\n",
    "                break\n",
    "            else:\n",
    "                print('You cannot use this username. This has already been taken.')\n",
    "                attempts -= 1 \n",
    "        else:\n",
    "            print('Maximum attempts reached. Please try again later.')\n",
    "        \n",
    "    def display_watch_history(self):\n",
    "        print(f\"Watch History for {self._username}:\")\n",
    "        print(\"Watched Movies:\")\n",
    "        for movie in self.watched_movies:\n",
    "            print(movie.title)\n",
    "            \n",
    "        print(\"\\nWatched TV Shows:\")\n",
    "        for tv_show in self.watched_tv_shows:\n",
    "            print(tv_show.title)\n",
    "            \n",
    "        \n",
    "        \n",
    "class StreamingPlatform :\n",
    "    \n",
    "    def __init__(self):\n",
    "        \n",
    "        self.movies_list = []  \n",
    "        self.tv_shows_list = []  \n",
    "        self.users = {}\n",
    "        self.default_subscription = 'Free'\n",
    "        \n",
    "    \n",
    "    def add_user(self,username,email,subscription_type=None):\n",
    "        \n",
    "        if subscription_type is None or subscription_type == '':\n",
    "            subscription_type = self.default_subscription\n",
    "        \n",
    "        new_user = User(username,email,subscription_type,self)   #(CHECK)composition or agrregation as User class is used in streaming class\n",
    "        self.users[username] = new_user\n",
    "        \n",
    "        # Fetch the updated subscription type from the User class\n",
    "        updated_subscription_type = new_user.subscription_type\n",
    "        print(f\"Welcome, {username}! Your subscription type is {updated_subscription_type}.\")\n",
    "        \n",
    "        if updated_subscription_type == 'Free':\n",
    "            print(\"Consider upgrading to enjoy more content!\")\n",
    "        elif updated_subscription_type == 'Platinum':\n",
    "            print(\"You have access to all premium content. Enjoy!\")\n",
    "        else:\n",
    "            print(\"You have access to basic content. Upgrade for more features.\")\n",
    "        \n",
    "       \n",
    "    def get_user(self,username):\n",
    "        \n",
    "        if username in self.users:\n",
    "            \n",
    "            user_obj = self.users[username]\n",
    "                \n",
    "            print(f\"Username is : {user_obj.username}\")\n",
    "            print(f\"Email id is : {user_obj.email}\")\n",
    "            print(f\"Subscription type is : {user_obj.subscription_type}\")\n",
    "            \n",
    "        else:\n",
    "            print('User not found.')\n",
    "            \n",
    "            \n",
    "    \n",
    "    def add_new_movie(self,title, genre, year, duration,category,director):\n",
    "        \n",
    "        new_movie = Movie(title, genre, year, duration,category,director)\n",
    "        self.movies_list.append(new_movie)\n",
    "        \n",
    "    \n",
    "    def add_new_tvshow(self,title, genre, year, duration,category,seasons):\n",
    "        \n",
    "        new_tvshow = Tvshow(title, genre, year, duration,category,seasons)\n",
    "        self.tv_shows_list.append(new_tvshow)\n",
    "\n",
    "\n",
    "    def get_movie_titles(self):\n",
    "        \n",
    "        return [movie.title for movie in self.movies_list]\n",
    "\n",
    "    def get_tv_show_titles(self):\n",
    "        \n",
    "        return [tvshow.title for tvshow in self.tv_shows_list]\n",
    "        \n",
    "        \n",
    "        \n",
    "    def what_to_watch(self):\n",
    "        \n",
    "        print('What do you want to watch ?')\n",
    "        a = int(input(\"If you want to watch Movies Enter 1.If you want to watch Tvhows Enter 2 :-\"))\n",
    "        \n",
    "        if a==1:\n",
    "            print('code entered this block')\n",
    "            for id,movie in enumerate(self.movies_list,1):\n",
    "                print('Entered 2')\n",
    "                title, genre, year, duration,category,director = movie\n",
    "                movie_info = Movie(title, genre, year, duration, category).get_info()\n",
    "                print(f\"{id},{title} ---- {movie_info}\")\n",
    "            a=0\n",
    "            while a<3:\n",
    "                choice = int(input('Enter the number of movie you want to watch: '))\n",
    "            \n",
    "                if 1 <= choice <= len(self.movies_list):\n",
    "                    selected_movie = self.movies_list[choice - 1]\n",
    "                    self.display_advertisement()\n",
    "                    print(f\"Now playing... {selected_movie[0]}\")\n",
    "                    self.users[username].watched_movies.append(selected_movie)\n",
    "                    break\n",
    "                \n",
    "                else :\n",
    "                    print('\"Invalid input. Please enter a valid number.\"')\n",
    "                    a=a+1\n",
    "                    \n",
    "            else:\n",
    "                print(\"Maximum attempts reached. Please try again later.\")\n",
    "               \n",
    "                \n",
    "        elif a==2:\n",
    "            \n",
    "            \n",
    "            for id,tvshow in enumerate(self.tv_shows_list,1):\n",
    "                title, genre, year, duration,category,seasons = tvshow\n",
    "                tvshow_info = Tvshow(title, genre, year, duration,category,seasons).get_info()\n",
    "                print(f\"{id},{title} ---- {tvshow_info}\")\n",
    "            a=0\n",
    "            while a<3:\n",
    "                choice = int(input('Enter the number of tvshow you want to watch: '))\n",
    "            \n",
    "                if 1 <= choice <= len(self.tv_shows_list) :\n",
    "                    selected_tvshow = self.tv_shows_list[choice - 1]\n",
    "                    self.display_advertisement()\n",
    "                    print(f\"Now playing... {selected_tvshow[0]}\")\n",
    "                    self.users[username].watched_tv_shows.append(selected_tvshow)\n",
    "                    break\n",
    "                \n",
    "                else :\n",
    "                    print('\"Invalid input. Please enter a valid number.\"')\n",
    "                    a=a+1\n",
    "                    \n",
    "            else:\n",
    "                print(\"Maximum attempts reached. Please try again later.\")\n",
    "                \n",
    "                \n",
    "        else:\n",
    "            print('Invalid input')\n",
    "            \n",
    "    \n",
    "class Advertisement:\n",
    "    \n",
    "    ads_dict = {}\n",
    "    \n",
    "    def __init__(self,ad_id,ad_content,target_audience):\n",
    "        \n",
    "        self.ad_id = ad_id\n",
    "        self.ad_content = ad_content\n",
    "        self.target_audience = target_audience\n",
    "        self.add_to_ads_dict()\n",
    "        \n",
    "    @classmethod\n",
    "    def display_advertisement(cls):\n",
    "        ad_ids = list(cls.ads_dict.keys())\n",
    "        if ad_ids:\n",
    "            random_ad_id = random.choice(ad_ids)\n",
    "            selected_ad = cls.ads_dict[random_ad_id]\n",
    "            print(f\"Advertisement ID: {random_ad_id}\")\n",
    "            print(f\"Content: {selected_ad['Content']}\")\n",
    "            print(f\"Target Audience: {selected_ad['Target Audience']}\")\n",
    "            print(\"Playing advertisement...\")\n",
    "            time.sleep(10)\n",
    "    \n",
    "    @classmethod    \n",
    "    def display_ad_details(cls):\n",
    "        \n",
    "        print(\"Ads stored in the dictionary:\")\n",
    "        for ad_id, ad_info in cls.ads_dict.items():\n",
    "            print(f\"Ad ID: {ad_id}\")\n",
    "            print(f\"Content: {ad_info['Content']}\")\n",
    "            print(f\"Target Audience: {ad_info['Target Audience']}\")\n",
    "            print()\n",
    "\n",
    "        \n",
    "    def add_to_ads_dict(self):\n",
    "        \n",
    "        Advertisement.ads_dict[self.ad_id] = {\n",
    "            \"Content\": self.ad_content,\n",
    "            \"Target Audience\": self.target_audience\n",
    "        }     \n",
    "\n",
    "\n",
    "class DiscussionBoard:\n",
    "    def __init__(self):\n",
    "        self.movie_discussions = {}\n",
    "        self.tv_show_discussions = {}\n",
    "\n",
    "    def start_movie_discussion(self, movie_title, initial_post):\n",
    "        \n",
    "        self.movie_discussions[movie_title] = [initial_post]\n",
    "\n",
    "    def start_tv_show_discussion(self, tv_show_title, initial_post):\n",
    "        \n",
    "        self.tv_show_discussions[tv_show_title] = [initial_post]\n",
    "\n",
    "    def add_movie_post(self, movie_title, post_content):\n",
    "        \n",
    "        if movie_title in self.movie_discussions:\n",
    "            self.movie_discussions[movie_title].append(post_content)\n",
    "        else:\n",
    "            print(\"Discussion for this movie not found.\")\n",
    "\n",
    "    def add_tv_show_post(self, tv_show_title, post_content):\n",
    "        \n",
    "        if tv_show_title in self.tv_show_discussions:\n",
    "            self.tv_show_discussions[tv_show_title].append(post_content)\n",
    "        else:\n",
    "            print(\"Discussion for this TV show not found.\")\n",
    "\n",
    "    def get_movie_discussion(self, movie_title):\n",
    "        \n",
    "        if movie_title in self.movie_discussions:\n",
    "            return self.movie_discussions[movie_title]\n",
    "        else:\n",
    "            return None\n",
    "\n",
    "    def get_tv_show_discussion(self, tv_show_title):\n",
    "        \n",
    "        if tv_show_title in self.tv_show_discussions:\n",
    "            return self.tv_show_discussions[tv_show_title]\n",
    "        else:\n",
    "            return None\n",
    "        \n",
    "class Watchlist:\n",
    "    def __init__(self, streaming_platform):\n",
    "        self.streaming_platform = streaming_platform\n",
    "        self.watchlist_items = []\n",
    "\n",
    "    def display_movies(self):\n",
    "        \n",
    "        movies_list = self.streaming_platform.movies_list\n",
    "        print(\"Movies available:\")\n",
    "        for index, movie in enumerate(movies_list, 1):\n",
    "            print(f\"{index}. {movie.title}\")\n",
    "\n",
    "    def display_tv_shows(self):\n",
    "        \n",
    "        tv_shows_list = self.streaming_platform.tv_shows_list\n",
    "        print(\"TV Shows available:\")\n",
    "        for index, tv_show in enumerate(tv_shows_list, 1):\n",
    "            print(f\"{index}. {tv_show.title}\")\n",
    "\n",
    "    def add_to_watchlist(self, selection_type, selected_item_number):\n",
    "        if selection_type == 'movie':\n",
    "            movies_list = self.streaming_platform.movies_list\n",
    "            if 1 <= selected_item_number <= len(movies_list):\n",
    "                selected_movie = movies_list[selected_item_number - 1]\n",
    "                self.watchlist_items.append(selected_movie)\n",
    "                print(f\"{selected_movie.title} added to your watchlist.\")\n",
    "            else:\n",
    "                print(\"Invalid movie selection.\")\n",
    "\n",
    "        elif selection_type == 'tv_show':\n",
    "            tv_shows_list = self.streaming_platform.tv_shows_list\n",
    "            if 1 <= selected_item_number <= len(tv_shows_list):\n",
    "                selected_tv_show = tv_shows_list[selected_item_number - 1]\n",
    "                self.watchlist_items.append(selected_tv_show)\n",
    "                print(f\"{selected_tv_show.title} added to your watchlist.\")\n",
    "            else:\n",
    "                print(\"Invalid TV show selection.\")\n",
    "        else:\n",
    "            print(\"Invalid selection type.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2325480b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75eebf73",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
